#include "mpi.h"
#include <random>
#include <iostream>
#include <chrono>

int Num;
int Rank;


void SearchWay(int x, int y, int x_to, int y_to, int size, int** map) {

	
	std::chrono::time_point<std::chrono::high_resolution_clock> start, stop;
	int*** matrix = new int**[size];
	for (int i = 0; i < size; i++) {
		matrix[i] = new int*[size];
		for (int j = 0; j < size; j++) {
			matrix[i][j] = new int[3];
		}
	}


	int step;
	bool added = true;
	for (int i = 0; i<size; i++) {
		for (int j = 0; j<size; j++) {
			if (map[i][j] != 0)
				matrix[i][j][0] = -2;
			else
				matrix[i][j][0] = -1;
		}
	}
	matrix[x_to][y_to][0] = 0;
	step = 0; 

	
	start = std::chrono::high_resolution_clock::now();
	while (added && matrix[x][y][0] == -1) {
		added = false;
		step++;

		for (int i = 0; i<size; i++) { 
			for (int j = 0; j<size; j++) {
				
				if (matrix[i][j][0] == step - 1) {
					int _i, _j;

					_i = i + 1; _j = j;

					if (_i >= 0 && _j >= 0 && _i<size && _j<size) {

						if (matrix[_i][_j][0] == -1 && matrix[_i][_j][0] != -2) {
							matrix[_i][_j][0] = step; 
							matrix[_i][_j][1] = i; 
							matrix[_i][_j][2] = j; 
							added = true; 
						}
					}

					_i = i - 1; _j = j;
				
					if (_i >= 0 && _j >= 0 && _i<size && _j<size) {
          
						if (matrix[_i][_j][0] == -1 && matrix[_i][_j][0] != -2) {
							matrix[_i][_j][0] = step; 
							matrix[_i][_j][1] = i; 
							matrix[_i][_j][2] = j;
							added = true;
						}
					}

					_i = i; _j = j + 1;
					
					if (_i >= 0 && _j >= 0 && _i<size && _j<size) {
					
						if (matrix[_i][_j][0] == -1 && matrix[_i][_j][0] != -2) {
							matrix[_i][_j][0] = step; 
							matrix[_i][_j][1] = i;
							matrix[_i][_j][2] = j; 
							added = true; 
						}
					}

					_i = i; _j = j - 1;
				
					if (_i >= 0 && _j >= 0 && _i<size && _j<size) {
				
						if (matrix[_i][_j][0] == -1 && matrix[_i][_j][0] != -2) {
							matrix[_i][_j][0] = step; 
							matrix[_i][_j][1] = i; 
							matrix[_i][_j][2] = j; 
							added = true; 
						}
					}
				}
			}
		}
	}
	stop = std::chrono::high_resolution_clock::now();
	std::cout << "TIME 1 - " << std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start).count() << std::endl;

	if (size < 51) {

		for (int i = 0; i<size; i++) {
			for (int j = 0; j<size; j++) {
				if (matrix[i][j][0]<10 && matrix[i][j][0]>-1)
					std::cout << " ";
				std::cout << matrix[i][j][0] << " ";
			}
			std::cout << std::endl;
		}


		if (matrix[x][y][0] == -1)
			std::cout << "No way!" << std::endl;
		else {
			int _i = x, _j = y;
			while (matrix[_i][_j][0] != 0) {
				
				std::cout << _j << "," << _i << std::endl;
				int li = matrix[_i][_j][1];
				int lj = matrix[_i][_j][2];
				_i = li; _j = lj;
			}
			std::cout << _j << "," << _i << std::endl << "Finish!" << std::endl;
		}
	}


	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++)
			delete[] matrix[i][j];
		delete[] matrix[i];
	}
	delete[] matrix;
}


void Lee_algorithm(int x, int y, int x_to, int y_to, int size, int** map) {


	std::chrono::time_point<std::chrono::high_resolution_clock> start, stop;
	int*** matrix = new int**[size];
	for (int i = 0; i < size; i++) {
		matrix[i] = new int*[size];
		for (int j = 0; j < size; j++) {
			matrix[i][j] = new int[3];
		}
	}


	int step;
	bool added = true;
	for (int i = 0; i<size; i++) {
		for (int j = 0; j<size; j++) {
			if (map[i][j] != 0)
				matrix[i][j][0] = -2;// занято
			else
				matrix[i][j][0] = -1;// Мы еще нигде не были
		}
	}
	matrix[x_to][y_to][0] = 0;
	step = 0; 

	
	start = std::chrono::high_resolution_clock::now();
	while (added && matrix[x][y][0] == -1) {
		added = false;
		step++;

		int k1 = 0, k2 = 0, r1 = 1, r2 = 1;
		for (int i = 0; i < size; i++) { 
			for (int j = 0; j < size; j++) {
				
				if (matrix[i][j][0] == step - 1) {
					int _i, _j;
					int add = 0;
					int _i_j[3];
				
					for (int r = 1; r < 5; r++) {
						if (k1 % 4 == 0) {
							_i_j[0] = i + 1;
							_i_j[1] = j;
						}
						else if (k1 % 4 == 1) {
							_i_j[0] = i - 1;
							_i_j[1] = j;
						}
						else if (k1 % 4 == 2) {
							_i_j[0] = i;
							_i_j[1] = j + 1;
						}
						else if (k1 % 4 == 3) {
							_i_j[0] = i;
							_i_j[1] = j - 1;
						}
						_i_j[2] = matrix[_i_j[0]][_i_j[1]][0];
						MPI_Send(_i_j, 3, MPI_INT, r1 % Num, 0, MPI_COMM_WORLD);
						k1++; r1++;
						if (r1 % Num == 0)
							r1++;
					}

		
					for (int r = 1; r < 5; r++) {
						MPI_Status status;
						MPI_Recv(&add, 1, MPI_INT, r2 % Num, 1, MPI_COMM_WORLD, &status);
						if (k2 % 4 == 0) {
							_i = i + 1; 
							_j = j;
						}
						else if (k2 % 4 == 1) {
							_i = i - 1; 
							_j = j;
						}
						else if (k2 % 4 == 2) {
							_i = i; 
							_j = j + 1;
						}
						else if (k2 % 4 == 3) {
							_i = i; 
							_j = j - 1;
						}
						if (add) {
							added = true;
							matrix[_i][_j][0] = step; // Добав-
							matrix[_i][_j][1] = i; // ля-
							matrix[_i][_j][2] = j; // ем
						}
						add = 0;
						k2++; r2++;
						if (r2 % Num == 0)
							r2++;
					}
				}
			}
		}
	}


	int k[3] = { -100,-100,-100 }, rar;
	for (int r = 1; r < Num; r++) {
		MPI_Send(k, 3, MPI_INT, r, 0, MPI_COMM_WORLD);
		MPI_Status status;
		MPI_Recv(&rar, 1, MPI_INT, r, 1, MPI_COMM_WORLD, &status);
	}
	stop = std::chrono::high_resolution_clock::now();
	std::cout << "TIME 2 - " << std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start).count() << std::endl;

	if (size < 51) {
		
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (matrix[i][j][0] < 10 && matrix[i][j][0] > -1)
					std::cout << " ";
				std::cout << matrix[i][j][0] << " ";
			}
			std::cout << std::endl;
		}

		
		if (matrix[x][y][0] == -1)
			std::cout << "No way!" << std::endl;
		else {
			int _i = x, _j = y;
			while (matrix[_i][_j][0] != 0) {
				
				std::cout << _j << "," << _i << std::endl;
				int li = matrix[_i][_j][1];
				int lj = matrix[_i][_j][2];
				_i = li; _j = lj;
			}
			std::cout << _j << "," << _i << std::endl << "Finish!" << std::endl;
		}
	}


	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++)
			delete[] matrix[i][j];
		delete[] matrix[i];
	}
	delete[] matrix;
}


void Lee_algorithm_worker(int size, int** map) {
	int _i_j[3];
	int res = 0;
	int all = 1;

	do {
		MPI_Status status;
		MPI_Recv(_i_j, 3, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
		if (_i_j[2] == -100)
			all = 0;

		
		if (_i_j[0] >= 0 && _i_j[1] >= 0 && _i_j[0] < size && _i_j[1] < size) {
			// Если (_i, _j) уже добавлено или непроходимо, то не обрабатываем 
			if (_i_j[2] == -1 && _i_j[2] != -2) {
				res = 1; // Что-то добавили
			}
		}

		MPI_Send(&res, 1, MPI_INT, 0, 1, MPI_COMM_WORLD);
		res = 0;
	} while (all);
}

int main(int argc, char*argv[]) {

	MPI_Init(&argc, &argv);

	std::random_device rd;
	std::default_random_engine generator(rd());
	std::uniform_int_distribution<int> distribution(0, 3);
	std::chrono::time_point<std::chrono::high_resolution_clock> start, stop;
	int N = 0;
	MPI_Comm_size(MPI_COMM_WORLD, &Num);
	MPI_Comm_rank(MPI_COMM_WORLD, &Rank);

	if (Num < 2) {
		if (Rank == 0)
			std::cout << "Incorrect value Num";
		MPI_Finalize();
		return 0;
	}

	if (Rank == 0) { 
		std::cout << "Input N - ";
		std::cin >> N;
	}

	MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);

	if (N < 2) {
		if (Rank == 0)
			std::cout << "Incorrect value N";
		MPI_Finalize();
		return 0;
	}

	int size = (N + 2) * (N + 2);
	int* mas = new int[size];
	int x1, y1, x2, y2;
	if (Rank == 0) { 
		for (int i = 0; i < size; i++) {
			if ((i < N + 2) || (i >= size - N - 2) || (i % (N + 2) == 0) || (i % (N + 2) == N + 1))
				mas[i] = -2;
			else {
				auto x = distribution(generator);
				if (x > 0) mas[i] = 0;
				else mas[i] = -2;
			}
			if (size < 71) {
				
				if (!mas[i])
					std::cout << " ";
				std::cout << mas[i] << " ";
				if (i % (N + 2) == N + 1)
					std::cout << std::endl;
			}
		}

		bool res = false;
		do {
			std::cout << "Input start x,y - ";
			std::cin >> x1 >> y1;
			std::cout << "Input stop x,y - ";
			std::cin >> x2 >> y2;
			res = (mas[y1 * (N + 2) + x1] == -2) || (mas[y2 * (N + 2) + x2] == -2) || (x1 == x2 && y1 == y2);
			if (res)
				std::cout << "Incorrect value x,y Repeat input" << std::endl;
		} while (res);
		std::cout << std::endl;
	}

	MPI_Bcast(mas, size, MPI_INT, 0, MPI_COMM_WORLD);//Все процессы знают поле

	
	size = N + 2;
	int** map = new int*[size];
	for (int i = 0; i < size; i++) {
		map[i] = new int[size];
		for (int j = 0; j < size; j++)
			map[i][j] = mas[i * size + j];
	}
	delete[] mas;


	if (Rank == 0) {
		std::cout << std::endl << "Sequential Algorithm" << std::endl;
		SearchWay(y1, x1, y2, x2, size, map);
	}


	if (Rank == 0) {
		std::cout << std::endl << "Parallel Algorithm" << std::endl;
		Lee_algorithm(y1, x1, y2, x2, size, map);
	}
	else
		Lee_algorithm_worker(size, map);

	
	for (int i = 0; i < size; i++)
		delete[] map[i];
	delete[] map;

	MPI_Finalize();
	return 0;
}
